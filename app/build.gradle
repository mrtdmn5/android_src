/*
 * ************************************************************************************************
 * * Â© 2020-2023 Qualcomm Technologies, Inc. and/or its subsidiaries. All rights reserved.        *
 * ************************************************************************************************
 */

plugins {
    id 'com.android.application'
    id 'androidx.navigation.safeargs'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
}

// get app version
def app_version = getProperties('version.properties')
def version_code = app_version['VERSION_CODE'].toInteger()
def version_name = app_version['VERSION_MAJOR'] + "." + app_version['VERSION_MINOR'] + "." + app_version['VERSION_CODE']

android {
    compileSdkVersion 33

    namespace 'com.qualcomm.qti.gaiaclient'

    defaultConfig {
        applicationId "com.qualcomm.qti.gaiaclient"

        minSdkVersion 27
        targetSdkVersion 33

        versionCode version_code
        versionName version_name

        buildConfigField "boolean", "UPGRADE_DEVELOPER_OPTIONS", "false"
        buildConfigField "String", "SERVICE_BASE_URL", "\"http://the.server.url\""
        buildConfigField "String", "SERVICE_TOKEN", "\"the_token\""
        buildConfigField "boolean", "SERVICE_LOGGING", "false"
        buildConfigField "boolean", "SERVICE_AVAILABILITY", "false"
    }

    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
        }
    }
}

dependencies {
    // public libraries
    implementation "androidx.appcompat:appcompat:1.5.1"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.core:core-ktx:1.9.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    implementation "androidx.navigation:navigation-fragment-ktx:2.5.3"
    implementation "androidx.navigation:navigation-ui-ktx:2.5.3"
    implementation "androidx.preference:preference-ktx:1.2.0"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "com.google.android.material:material:1.7.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.10.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"

    // automated dependencies injections
    implementation "com.google.dagger:hilt-android:2.38.1"
    kapt "com.google.dagger:hilt-android-compiler:2.38.1"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    kapt "androidx.hilt:hilt-compiler:1.0.0" // Kotlin
    annotationProcessor "androidx.hilt:hilt-compiler:1.0.0" // Java

    // modules
    implementation project(':app-core')
    implementation project(':lib-upgrade')
}

/**
 * Load the given file as properties.
 *
 * @return a Properties object which contains the properties from the given file path.
 */
def getProperties(String filePath) {
    def propertiesFile = file(filePath)

    if (propertiesFile.canRead()) {
        Properties properties = new Properties()
        FileInputStream file = new FileInputStream(propertiesFile)
        properties.load(file)
        file.close()
        return properties
    } else {
        throw new GradleException("getProperties(): could not read " + filePath)
    }
}
